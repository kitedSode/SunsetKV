启动：
一个raftServer启动后会像自己建立一个rpc服务，然后向其他所有的server发送rpc连接请求。
MakePeers(): 向其他所有的server发送rpc连接请求
当A收到来自B的连接后，B会调用A的Connect函数来使A重新建立一个连接B的rpc服务的连接。因为当这个系统稳定运行一个短时间后，各个follower之间不会
进行通信，主要是由leader向follower发送消息。所以两个follower之间出现通信问题时他们之间重连是个问题。我在想要不要每个server之间都加上心跳操作。

方案1：
当一个服务器宕机后，没有必要一直由A一直去试图发送连接请求，而是应该等到B恢复后向A发送rpc连接请求，然后A再去获得对B的rpc服务。
B断开->B恢复->向A发送rpc连接请求->调用A的connect()函数->A重新建立对B的rpc服务
这里的问题就是当A只是断网而不是宕机，则A不会去执行MakePeer()函数去主动连接其他服务器，而其他服务器由于没有收到来自A的连接请求，所以也不会去连接A。
这就使A成了一个“孤岛”。

方案2：
创建ReConnect()函数，检测peer的状态并循环执行连接操作直到连接成功。
假设服务器A、B、C。当出现A的Call()函数失败或者收到了B或者C调用了A的Connect函数时都会去执行该函数。在执行该函数时会先查看peer的状态，
如果是connected，则执行Ping()函数来查看该连接时候正常。Ping函数会去调用B的Ping函数，当收到了来自B的回复时表示该连接正常不用重置。
如果是close，则执行连接操作并将B的peer状态设置为isConnecting。
如果是isConnecting，表示已经在执行重连了则无需其他操作。
设A为leader
B宕机->A向B发送数据失败，将B的peer状态设置为close->A执行函数ReConnect()，将->B恢复 ->向A发送rpc连接请求->连接到A后调用A的connect()函数->根据connected状态调用ping()发现正常
                                                                                                                                                       -> ok
                                          ->A之前向B发送的重连操作成功->将B的Peer状态设置为Connected

B断网->无法收到来自leader的消息自己成为follower->向其他所有服务器发送投票请求发现全部断开连接->对其他所有服务器进行重连操作（这里可以考虑停止B的投票直到和超过一半服务器的连接重新建立成功)
                                                                                                       ->A在B断开时会一直执行重连操作->B恢复时可以参考上面的第二部分操作
                                                                                                       ->C不会感知到B的断开->B恢复时会调用C的Connect()函数来重新建立C对B的rpc连接

